/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export const AMMS_CONFIG_DISCRIMINATOR = new Uint8Array([
  14, 184, 126, 68, 173, 213, 150, 0,
]);

export function getAmmsConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(AMMS_CONFIG_DISCRIMINATOR);
}

export type AmmsConfig = {
  discriminator: ReadonlyUint8Array;
  /** Canonical bump seed for the account's PDA. */
  bump: number;
  /** A unique identifier for this configuration in the `AmmsConfigsManager` collection. */
  id: bigint;
  /** The public key of the authority responsible for collecting protocol fees from pools. */
  feeAuthority: Address;
  /** The fee rate for liquidity providers, measured in basis points (1 basis point = 0.01%). */
  providersFeeRateBasisPoints: number;
  /** The protocol's fee rate, measured in basis points (1 basis point = 0.01%). */
  protocolFeeRateBasisPoints: number;
};

export type AmmsConfigArgs = {
  /** Canonical bump seed for the account's PDA. */
  bump: number;
  /** A unique identifier for this configuration in the `AmmsConfigsManager` collection. */
  id: number | bigint;
  /** The public key of the authority responsible for collecting protocol fees from pools. */
  feeAuthority: Address;
  /** The fee rate for liquidity providers, measured in basis points (1 basis point = 0.01%). */
  providersFeeRateBasisPoints: number;
  /** The protocol's fee rate, measured in basis points (1 basis point = 0.01%). */
  protocolFeeRateBasisPoints: number;
};

export function getAmmsConfigEncoder(): Encoder<AmmsConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['id', getU64Encoder()],
      ['feeAuthority', getAddressEncoder()],
      ['providersFeeRateBasisPoints', getU16Encoder()],
      ['protocolFeeRateBasisPoints', getU16Encoder()],
    ]),
    (value) => ({ ...value, discriminator: AMMS_CONFIG_DISCRIMINATOR })
  );
}

export function getAmmsConfigDecoder(): Decoder<AmmsConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['id', getU64Decoder()],
    ['feeAuthority', getAddressDecoder()],
    ['providersFeeRateBasisPoints', getU16Decoder()],
    ['protocolFeeRateBasisPoints', getU16Decoder()],
  ]);
}

export function getAmmsConfigCodec(): Codec<AmmsConfigArgs, AmmsConfig> {
  return combineCodec(getAmmsConfigEncoder(), getAmmsConfigDecoder());
}

export function decodeAmmsConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<AmmsConfig, TAddress>;
export function decodeAmmsConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<AmmsConfig, TAddress>;
export function decodeAmmsConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<AmmsConfig, TAddress> | MaybeAccount<AmmsConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAmmsConfigDecoder()
  );
}

export async function fetchAmmsConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<AmmsConfig, TAddress>> {
  const maybeAccount = await fetchMaybeAmmsConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAmmsConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<AmmsConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAmmsConfig(maybeAccount);
}

export async function fetchAllAmmsConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<AmmsConfig>[]> {
  const maybeAccounts = await fetchAllMaybeAmmsConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAmmsConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<AmmsConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeAmmsConfig(maybeAccount));
}

export function getAmmsConfigSize(): number {
  return 53;
}
