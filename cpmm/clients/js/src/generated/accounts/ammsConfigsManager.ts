/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export const AMMS_CONFIGS_MANAGER_DISCRIMINATOR = new Uint8Array([
  139, 250, 201, 66, 232, 224, 136, 144,
]);

export function getAmmsConfigsManagerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    AMMS_CONFIGS_MANAGER_DISCRIMINATOR
  );
}

export type AmmsConfigsManager = {
  discriminator: ReadonlyUint8Array;
  /** The public key of the authority responsible for managing configurations. */
  authority: Address;
  /** The public key of the head authority, which may have broader governance privileges. */
  headAuthority: Address;
  /** The number of configurations managed by this account. */
  configsCount: bigint;
  /** The canonical bump seed used for the account's PDA. */
  bump: number;
};

export type AmmsConfigsManagerArgs = {
  /** The public key of the authority responsible for managing configurations. */
  authority: Address;
  /** The public key of the head authority, which may have broader governance privileges. */
  headAuthority: Address;
  /** The number of configurations managed by this account. */
  configsCount: number | bigint;
  /** The canonical bump seed used for the account's PDA. */
  bump: number;
};

export function getAmmsConfigsManagerEncoder(): Encoder<AmmsConfigsManagerArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['headAuthority', getAddressEncoder()],
      ['configsCount', getU64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: AMMS_CONFIGS_MANAGER_DISCRIMINATOR })
  );
}

export function getAmmsConfigsManagerDecoder(): Decoder<AmmsConfigsManager> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['headAuthority', getAddressDecoder()],
    ['configsCount', getU64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getAmmsConfigsManagerCodec(): Codec<
  AmmsConfigsManagerArgs,
  AmmsConfigsManager
> {
  return combineCodec(
    getAmmsConfigsManagerEncoder(),
    getAmmsConfigsManagerDecoder()
  );
}

export function decodeAmmsConfigsManager<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<AmmsConfigsManager, TAddress>;
export function decodeAmmsConfigsManager<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<AmmsConfigsManager, TAddress>;
export function decodeAmmsConfigsManager<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<AmmsConfigsManager, TAddress>
  | MaybeAccount<AmmsConfigsManager, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAmmsConfigsManagerDecoder()
  );
}

export async function fetchAmmsConfigsManager<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<AmmsConfigsManager, TAddress>> {
  const maybeAccount = await fetchMaybeAmmsConfigsManager(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAmmsConfigsManager<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<AmmsConfigsManager, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAmmsConfigsManager(maybeAccount);
}

export async function fetchAllAmmsConfigsManager(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<AmmsConfigsManager>[]> {
  const maybeAccounts = await fetchAllMaybeAmmsConfigsManager(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAmmsConfigsManager(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<AmmsConfigsManager>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeAmmsConfigsManager(maybeAccount)
  );
}

export function getAmmsConfigsManagerSize(): number {
  return 81;
}
