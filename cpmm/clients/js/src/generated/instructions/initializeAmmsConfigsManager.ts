/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { CPMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_AMMS_CONFIGS_MANAGER_DISCRIMINATOR = new Uint8Array([
  128, 200, 181, 18, 56, 7, 176, 7,
]);

export function getInitializeAmmsConfigsManagerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_AMMS_CONFIGS_MANAGER_DISCRIMINATOR
  );
}

export type InitializeAmmsConfigsManagerInstruction<
  TProgram extends string = typeof CPMM_PROGRAM_ADDRESS,
  TAccountSigner extends
    | string
    | IAccountMeta<string> = '2ABbV6CYiv8ohsaYyGUbTrXL6qf8xeYbASnAmBpwQkyC',
  TAccountAmmsConfigsManager extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountHeadAuthority extends
    | string
    | IAccountMeta<string> = '2ABbV6CYiv8ohsaYyGUbTrXL6qf8xeYbASnAmBpwQkyC',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountAmmsConfigsManager extends string
        ? WritableAccount<TAccountAmmsConfigsManager>
        : TAccountAmmsConfigsManager,
      TAccountAuthority extends string
        ? ReadonlyAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountHeadAuthority extends string
        ? ReadonlyAccount<TAccountHeadAuthority>
        : TAccountHeadAuthority,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeAmmsConfigsManagerInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitializeAmmsConfigsManagerInstructionDataArgs = {};

export function getInitializeAmmsConfigsManagerInstructionDataEncoder(): Encoder<InitializeAmmsConfigsManagerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_AMMS_CONFIGS_MANAGER_DISCRIMINATOR,
    })
  );
}

export function getInitializeAmmsConfigsManagerInstructionDataDecoder(): Decoder<InitializeAmmsConfigsManagerInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeAmmsConfigsManagerInstructionDataCodec(): Codec<
  InitializeAmmsConfigsManagerInstructionDataArgs,
  InitializeAmmsConfigsManagerInstructionData
> {
  return combineCodec(
    getInitializeAmmsConfigsManagerInstructionDataEncoder(),
    getInitializeAmmsConfigsManagerInstructionDataDecoder()
  );
}

export type InitializeAmmsConfigsManagerAsyncInput<
  TAccountSigner extends string = string,
  TAccountAmmsConfigsManager extends string = string,
  TAccountAuthority extends string = string,
  TAccountHeadAuthority extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer?: TransactionSigner<TAccountSigner>;
  ammsConfigsManager?: Address<TAccountAmmsConfigsManager>;
  authority: Address<TAccountAuthority>;
  headAuthority?: Address<TAccountHeadAuthority>;
  rent?: Address<TAccountRent>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getInitializeAmmsConfigsManagerInstructionAsync<
  TAccountSigner extends string,
  TAccountAmmsConfigsManager extends string,
  TAccountAuthority extends string,
  TAccountHeadAuthority extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CPMM_PROGRAM_ADDRESS,
>(
  input: InitializeAmmsConfigsManagerAsyncInput<
    TAccountSigner,
    TAccountAmmsConfigsManager,
    TAccountAuthority,
    TAccountHeadAuthority,
    TAccountRent,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeAmmsConfigsManagerInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountAmmsConfigsManager,
    TAccountAuthority,
    TAccountHeadAuthority,
    TAccountRent,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    ammsConfigsManager: {
      value: input.ammsConfigsManager ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    headAuthority: { value: input.headAuthority ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.signer.value) {
    accounts.signer.value =
      '2ABbV6CYiv8ohsaYyGUbTrXL6qf8xeYbASnAmBpwQkyC' as Address<'2ABbV6CYiv8ohsaYyGUbTrXL6qf8xeYbASnAmBpwQkyC'>;
  }
  if (!accounts.ammsConfigsManager.value) {
    accounts.ammsConfigsManager.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            97, 109, 109, 115, 95, 99, 111, 110, 102, 105, 103, 115, 95, 109,
            97, 110, 97, 103, 101, 114,
          ])
        ),
      ],
    });
  }
  if (!accounts.headAuthority.value) {
    accounts.headAuthority.value =
      '2ABbV6CYiv8ohsaYyGUbTrXL6qf8xeYbASnAmBpwQkyC' as Address<'2ABbV6CYiv8ohsaYyGUbTrXL6qf8xeYbASnAmBpwQkyC'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.ammsConfigsManager),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.headAuthority),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeAmmsConfigsManagerInstructionDataEncoder().encode({}),
  } as InitializeAmmsConfigsManagerInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountAmmsConfigsManager,
    TAccountAuthority,
    TAccountHeadAuthority,
    TAccountRent,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeAmmsConfigsManagerInput<
  TAccountSigner extends string = string,
  TAccountAmmsConfigsManager extends string = string,
  TAccountAuthority extends string = string,
  TAccountHeadAuthority extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer?: TransactionSigner<TAccountSigner>;
  ammsConfigsManager: Address<TAccountAmmsConfigsManager>;
  authority: Address<TAccountAuthority>;
  headAuthority?: Address<TAccountHeadAuthority>;
  rent?: Address<TAccountRent>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeAmmsConfigsManagerInstruction<
  TAccountSigner extends string,
  TAccountAmmsConfigsManager extends string,
  TAccountAuthority extends string,
  TAccountHeadAuthority extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CPMM_PROGRAM_ADDRESS,
>(
  input: InitializeAmmsConfigsManagerInput<
    TAccountSigner,
    TAccountAmmsConfigsManager,
    TAccountAuthority,
    TAccountHeadAuthority,
    TAccountRent,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeAmmsConfigsManagerInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountAmmsConfigsManager,
  TAccountAuthority,
  TAccountHeadAuthority,
  TAccountRent,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    ammsConfigsManager: {
      value: input.ammsConfigsManager ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    headAuthority: { value: input.headAuthority ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.signer.value) {
    accounts.signer.value =
      '2ABbV6CYiv8ohsaYyGUbTrXL6qf8xeYbASnAmBpwQkyC' as Address<'2ABbV6CYiv8ohsaYyGUbTrXL6qf8xeYbASnAmBpwQkyC'>;
  }
  if (!accounts.headAuthority.value) {
    accounts.headAuthority.value =
      '2ABbV6CYiv8ohsaYyGUbTrXL6qf8xeYbASnAmBpwQkyC' as Address<'2ABbV6CYiv8ohsaYyGUbTrXL6qf8xeYbASnAmBpwQkyC'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.ammsConfigsManager),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.headAuthority),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeAmmsConfigsManagerInstructionDataEncoder().encode({}),
  } as InitializeAmmsConfigsManagerInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountAmmsConfigsManager,
    TAccountAuthority,
    TAccountHeadAuthority,
    TAccountRent,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeAmmsConfigsManagerInstruction<
  TProgram extends string = typeof CPMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    ammsConfigsManager: TAccountMetas[1];
    authority: TAccountMetas[2];
    headAuthority: TAccountMetas[3];
    rent: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: InitializeAmmsConfigsManagerInstructionData;
};

export function parseInitializeAmmsConfigsManagerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeAmmsConfigsManagerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      ammsConfigsManager: getNextAccount(),
      authority: getNextAccount(),
      headAuthority: getNextAccount(),
      rent: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeAmmsConfigsManagerInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
