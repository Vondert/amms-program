/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { CPMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const COLLECT_FEES_FROM_CP_AMM_DISCRIMINATOR = new Uint8Array([
  54, 226, 123, 162, 0, 184, 158, 206,
]);

export function getCollectFeesFromCpAmmDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COLLECT_FEES_FROM_CP_AMM_DISCRIMINATOR
  );
}

export type CollectFeesFromCpAmmInstruction<
  TProgram extends string = typeof CPMM_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountFeeAuthority extends string | IAccountMeta<string> = string,
  TAccountBaseMint extends string | IAccountMeta<string> = string,
  TAccountQuoteMint extends string | IAccountMeta<string> = string,
  TAccountFeeAuthorityBaseAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountFeeAuthorityQuoteAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountAmmsConfig extends string | IAccountMeta<string> = string,
  TAccountCpAmm extends string | IAccountMeta<string> = string,
  TAccountCpAmmBaseVault extends string | IAccountMeta<string> = string,
  TAccountCpAmmQuoteVault extends string | IAccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountToken2022Program extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountFeeAuthority extends string
        ? WritableAccount<TAccountFeeAuthority>
        : TAccountFeeAuthority,
      TAccountBaseMint extends string
        ? ReadonlyAccount<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountFeeAuthorityBaseAccount extends string
        ? WritableAccount<TAccountFeeAuthorityBaseAccount>
        : TAccountFeeAuthorityBaseAccount,
      TAccountFeeAuthorityQuoteAccount extends string
        ? WritableAccount<TAccountFeeAuthorityQuoteAccount>
        : TAccountFeeAuthorityQuoteAccount,
      TAccountAmmsConfig extends string
        ? ReadonlyAccount<TAccountAmmsConfig>
        : TAccountAmmsConfig,
      TAccountCpAmm extends string
        ? WritableAccount<TAccountCpAmm>
        : TAccountCpAmm,
      TAccountCpAmmBaseVault extends string
        ? WritableAccount<TAccountCpAmmBaseVault>
        : TAccountCpAmmBaseVault,
      TAccountCpAmmQuoteVault extends string
        ? WritableAccount<TAccountCpAmmQuoteVault>
        : TAccountCpAmmQuoteVault,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CollectFeesFromCpAmmInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CollectFeesFromCpAmmInstructionDataArgs = {};

export function getCollectFeesFromCpAmmInstructionDataEncoder(): Encoder<CollectFeesFromCpAmmInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: COLLECT_FEES_FROM_CP_AMM_DISCRIMINATOR,
    })
  );
}

export function getCollectFeesFromCpAmmInstructionDataDecoder(): Decoder<CollectFeesFromCpAmmInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCollectFeesFromCpAmmInstructionDataCodec(): Codec<
  CollectFeesFromCpAmmInstructionDataArgs,
  CollectFeesFromCpAmmInstructionData
> {
  return combineCodec(
    getCollectFeesFromCpAmmInstructionDataEncoder(),
    getCollectFeesFromCpAmmInstructionDataDecoder()
  );
}

export type CollectFeesFromCpAmmAsyncInput<
  TAccountSigner extends string = string,
  TAccountFeeAuthority extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountFeeAuthorityBaseAccount extends string = string,
  TAccountFeeAuthorityQuoteAccount extends string = string,
  TAccountAmmsConfig extends string = string,
  TAccountCpAmm extends string = string,
  TAccountCpAmmBaseVault extends string = string,
  TAccountCpAmmQuoteVault extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  feeAuthority: Address<TAccountFeeAuthority>;
  baseMint: Address<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  feeAuthorityBaseAccount?: Address<TAccountFeeAuthorityBaseAccount>;
  feeAuthorityQuoteAccount?: Address<TAccountFeeAuthorityQuoteAccount>;
  ammsConfig: Address<TAccountAmmsConfig>;
  cpAmm: Address<TAccountCpAmm>;
  cpAmmBaseVault: Address<TAccountCpAmmBaseVault>;
  cpAmmQuoteVault: Address<TAccountCpAmmQuoteVault>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  token2022Program?: Address<TAccountToken2022Program>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getCollectFeesFromCpAmmInstructionAsync<
  TAccountSigner extends string,
  TAccountFeeAuthority extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountFeeAuthorityBaseAccount extends string,
  TAccountFeeAuthorityQuoteAccount extends string,
  TAccountAmmsConfig extends string,
  TAccountCpAmm extends string,
  TAccountCpAmmBaseVault extends string,
  TAccountCpAmmQuoteVault extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountToken2022Program extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CPMM_PROGRAM_ADDRESS,
>(
  input: CollectFeesFromCpAmmAsyncInput<
    TAccountSigner,
    TAccountFeeAuthority,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountFeeAuthorityBaseAccount,
    TAccountFeeAuthorityQuoteAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountToken2022Program,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CollectFeesFromCpAmmInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountFeeAuthority,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountFeeAuthorityBaseAccount,
    TAccountFeeAuthorityQuoteAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountToken2022Program,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    feeAuthority: { value: input.feeAuthority ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    feeAuthorityBaseAccount: {
      value: input.feeAuthorityBaseAccount ?? null,
      isWritable: true,
    },
    feeAuthorityQuoteAccount: {
      value: input.feeAuthorityQuoteAccount ?? null,
      isWritable: true,
    },
    ammsConfig: { value: input.ammsConfig ?? null, isWritable: false },
    cpAmm: { value: input.cpAmm ?? null, isWritable: true },
    cpAmmBaseVault: { value: input.cpAmmBaseVault ?? null, isWritable: true },
    cpAmmQuoteVault: { value: input.cpAmmQuoteVault ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.feeAuthorityBaseAccount.value) {
    accounts.feeAuthorityBaseAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.feeAuthority.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.baseMint.value)),
      ],
    });
  }
  if (!accounts.feeAuthorityQuoteAccount.value) {
    accounts.feeAuthorityQuoteAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.feeAuthority.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.token2022Program.value) {
    accounts.token2022Program.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.feeAuthority),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.feeAuthorityBaseAccount),
      getAccountMeta(accounts.feeAuthorityQuoteAccount),
      getAccountMeta(accounts.ammsConfig),
      getAccountMeta(accounts.cpAmm),
      getAccountMeta(accounts.cpAmmBaseVault),
      getAccountMeta(accounts.cpAmmQuoteVault),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCollectFeesFromCpAmmInstructionDataEncoder().encode({}),
  } as CollectFeesFromCpAmmInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountFeeAuthority,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountFeeAuthorityBaseAccount,
    TAccountFeeAuthorityQuoteAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountToken2022Program,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CollectFeesFromCpAmmInput<
  TAccountSigner extends string = string,
  TAccountFeeAuthority extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountFeeAuthorityBaseAccount extends string = string,
  TAccountFeeAuthorityQuoteAccount extends string = string,
  TAccountAmmsConfig extends string = string,
  TAccountCpAmm extends string = string,
  TAccountCpAmmBaseVault extends string = string,
  TAccountCpAmmQuoteVault extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  feeAuthority: Address<TAccountFeeAuthority>;
  baseMint: Address<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  feeAuthorityBaseAccount: Address<TAccountFeeAuthorityBaseAccount>;
  feeAuthorityQuoteAccount: Address<TAccountFeeAuthorityQuoteAccount>;
  ammsConfig: Address<TAccountAmmsConfig>;
  cpAmm: Address<TAccountCpAmm>;
  cpAmmBaseVault: Address<TAccountCpAmmBaseVault>;
  cpAmmQuoteVault: Address<TAccountCpAmmQuoteVault>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  token2022Program?: Address<TAccountToken2022Program>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getCollectFeesFromCpAmmInstruction<
  TAccountSigner extends string,
  TAccountFeeAuthority extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountFeeAuthorityBaseAccount extends string,
  TAccountFeeAuthorityQuoteAccount extends string,
  TAccountAmmsConfig extends string,
  TAccountCpAmm extends string,
  TAccountCpAmmBaseVault extends string,
  TAccountCpAmmQuoteVault extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountToken2022Program extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CPMM_PROGRAM_ADDRESS,
>(
  input: CollectFeesFromCpAmmInput<
    TAccountSigner,
    TAccountFeeAuthority,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountFeeAuthorityBaseAccount,
    TAccountFeeAuthorityQuoteAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountToken2022Program,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CollectFeesFromCpAmmInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountFeeAuthority,
  TAccountBaseMint,
  TAccountQuoteMint,
  TAccountFeeAuthorityBaseAccount,
  TAccountFeeAuthorityQuoteAccount,
  TAccountAmmsConfig,
  TAccountCpAmm,
  TAccountCpAmmBaseVault,
  TAccountCpAmmQuoteVault,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountToken2022Program,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    feeAuthority: { value: input.feeAuthority ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    feeAuthorityBaseAccount: {
      value: input.feeAuthorityBaseAccount ?? null,
      isWritable: true,
    },
    feeAuthorityQuoteAccount: {
      value: input.feeAuthorityQuoteAccount ?? null,
      isWritable: true,
    },
    ammsConfig: { value: input.ammsConfig ?? null, isWritable: false },
    cpAmm: { value: input.cpAmm ?? null, isWritable: true },
    cpAmmBaseVault: { value: input.cpAmmBaseVault ?? null, isWritable: true },
    cpAmmQuoteVault: { value: input.cpAmmQuoteVault ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.token2022Program.value) {
    accounts.token2022Program.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.feeAuthority),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.feeAuthorityBaseAccount),
      getAccountMeta(accounts.feeAuthorityQuoteAccount),
      getAccountMeta(accounts.ammsConfig),
      getAccountMeta(accounts.cpAmm),
      getAccountMeta(accounts.cpAmmBaseVault),
      getAccountMeta(accounts.cpAmmQuoteVault),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCollectFeesFromCpAmmInstructionDataEncoder().encode({}),
  } as CollectFeesFromCpAmmInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountFeeAuthority,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountFeeAuthorityBaseAccount,
    TAccountFeeAuthorityQuoteAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountToken2022Program,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCollectFeesFromCpAmmInstruction<
  TProgram extends string = typeof CPMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    feeAuthority: TAccountMetas[1];
    baseMint: TAccountMetas[2];
    quoteMint: TAccountMetas[3];
    feeAuthorityBaseAccount: TAccountMetas[4];
    feeAuthorityQuoteAccount: TAccountMetas[5];
    ammsConfig: TAccountMetas[6];
    cpAmm: TAccountMetas[7];
    cpAmmBaseVault: TAccountMetas[8];
    cpAmmQuoteVault: TAccountMetas[9];
    associatedTokenProgram: TAccountMetas[10];
    tokenProgram: TAccountMetas[11];
    token2022Program: TAccountMetas[12];
    systemProgram: TAccountMetas[13];
  };
  data: CollectFeesFromCpAmmInstructionData;
};

export function parseCollectFeesFromCpAmmInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCollectFeesFromCpAmmInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      feeAuthority: getNextAccount(),
      baseMint: getNextAccount(),
      quoteMint: getNextAccount(),
      feeAuthorityBaseAccount: getNextAccount(),
      feeAuthorityQuoteAccount: getNextAccount(),
      ammsConfig: getNextAccount(),
      cpAmm: getNextAccount(),
      cpAmmBaseVault: getNextAccount(),
      cpAmmQuoteVault: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      token2022Program: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCollectFeesFromCpAmmInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
