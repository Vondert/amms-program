/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { CPMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_AMMS_CONFIG_FEE_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  135, 191, 58, 216, 110, 155, 53, 191,
]);

export function getUpdateAmmsConfigFeeAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_AMMS_CONFIG_FEE_AUTHORITY_DISCRIMINATOR
  );
}

export type UpdateAmmsConfigFeeAuthorityInstruction<
  TProgram extends string = typeof CPMM_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountAmmsConfigsManager extends string | IAccountMeta<string> = string,
  TAccountAmmsConfig extends string | IAccountMeta<string> = string,
  TAccountNewFeeAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountAmmsConfigsManager extends string
        ? ReadonlyAccount<TAccountAmmsConfigsManager>
        : TAccountAmmsConfigsManager,
      TAccountAmmsConfig extends string
        ? WritableAccount<TAccountAmmsConfig>
        : TAccountAmmsConfig,
      TAccountNewFeeAuthority extends string
        ? ReadonlyAccount<TAccountNewFeeAuthority>
        : TAccountNewFeeAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateAmmsConfigFeeAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type UpdateAmmsConfigFeeAuthorityInstructionDataArgs = {};

export function getUpdateAmmsConfigFeeAuthorityInstructionDataEncoder(): Encoder<UpdateAmmsConfigFeeAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: UPDATE_AMMS_CONFIG_FEE_AUTHORITY_DISCRIMINATOR,
    })
  );
}

export function getUpdateAmmsConfigFeeAuthorityInstructionDataDecoder(): Decoder<UpdateAmmsConfigFeeAuthorityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getUpdateAmmsConfigFeeAuthorityInstructionDataCodec(): Codec<
  UpdateAmmsConfigFeeAuthorityInstructionDataArgs,
  UpdateAmmsConfigFeeAuthorityInstructionData
> {
  return combineCodec(
    getUpdateAmmsConfigFeeAuthorityInstructionDataEncoder(),
    getUpdateAmmsConfigFeeAuthorityInstructionDataDecoder()
  );
}

export type UpdateAmmsConfigFeeAuthorityAsyncInput<
  TAccountAuthority extends string = string,
  TAccountAmmsConfigsManager extends string = string,
  TAccountAmmsConfig extends string = string,
  TAccountNewFeeAuthority extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  ammsConfigsManager?: Address<TAccountAmmsConfigsManager>;
  ammsConfig: Address<TAccountAmmsConfig>;
  newFeeAuthority: Address<TAccountNewFeeAuthority>;
};

export async function getUpdateAmmsConfigFeeAuthorityInstructionAsync<
  TAccountAuthority extends string,
  TAccountAmmsConfigsManager extends string,
  TAccountAmmsConfig extends string,
  TAccountNewFeeAuthority extends string,
  TProgramAddress extends Address = typeof CPMM_PROGRAM_ADDRESS,
>(
  input: UpdateAmmsConfigFeeAuthorityAsyncInput<
    TAccountAuthority,
    TAccountAmmsConfigsManager,
    TAccountAmmsConfig,
    TAccountNewFeeAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateAmmsConfigFeeAuthorityInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountAmmsConfigsManager,
    TAccountAmmsConfig,
    TAccountNewFeeAuthority
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    ammsConfigsManager: {
      value: input.ammsConfigsManager ?? null,
      isWritable: false,
    },
    ammsConfig: { value: input.ammsConfig ?? null, isWritable: true },
    newFeeAuthority: {
      value: input.newFeeAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.ammsConfigsManager.value) {
    accounts.ammsConfigsManager.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            97, 109, 109, 115, 95, 99, 111, 110, 102, 105, 103, 115, 95, 109,
            97, 110, 97, 103, 101, 114,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.ammsConfigsManager),
      getAccountMeta(accounts.ammsConfig),
      getAccountMeta(accounts.newFeeAuthority),
    ],
    programAddress,
    data: getUpdateAmmsConfigFeeAuthorityInstructionDataEncoder().encode({}),
  } as UpdateAmmsConfigFeeAuthorityInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountAmmsConfigsManager,
    TAccountAmmsConfig,
    TAccountNewFeeAuthority
  >;

  return instruction;
}

export type UpdateAmmsConfigFeeAuthorityInput<
  TAccountAuthority extends string = string,
  TAccountAmmsConfigsManager extends string = string,
  TAccountAmmsConfig extends string = string,
  TAccountNewFeeAuthority extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  ammsConfigsManager: Address<TAccountAmmsConfigsManager>;
  ammsConfig: Address<TAccountAmmsConfig>;
  newFeeAuthority: Address<TAccountNewFeeAuthority>;
};

export function getUpdateAmmsConfigFeeAuthorityInstruction<
  TAccountAuthority extends string,
  TAccountAmmsConfigsManager extends string,
  TAccountAmmsConfig extends string,
  TAccountNewFeeAuthority extends string,
  TProgramAddress extends Address = typeof CPMM_PROGRAM_ADDRESS,
>(
  input: UpdateAmmsConfigFeeAuthorityInput<
    TAccountAuthority,
    TAccountAmmsConfigsManager,
    TAccountAmmsConfig,
    TAccountNewFeeAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateAmmsConfigFeeAuthorityInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountAmmsConfigsManager,
  TAccountAmmsConfig,
  TAccountNewFeeAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    ammsConfigsManager: {
      value: input.ammsConfigsManager ?? null,
      isWritable: false,
    },
    ammsConfig: { value: input.ammsConfig ?? null, isWritable: true },
    newFeeAuthority: {
      value: input.newFeeAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.ammsConfigsManager),
      getAccountMeta(accounts.ammsConfig),
      getAccountMeta(accounts.newFeeAuthority),
    ],
    programAddress,
    data: getUpdateAmmsConfigFeeAuthorityInstructionDataEncoder().encode({}),
  } as UpdateAmmsConfigFeeAuthorityInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountAmmsConfigsManager,
    TAccountAmmsConfig,
    TAccountNewFeeAuthority
  >;

  return instruction;
}

export type ParsedUpdateAmmsConfigFeeAuthorityInstruction<
  TProgram extends string = typeof CPMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    ammsConfigsManager: TAccountMetas[1];
    ammsConfig: TAccountMetas[2];
    newFeeAuthority: TAccountMetas[3];
  };
  data: UpdateAmmsConfigFeeAuthorityInstructionData;
};

export function parseUpdateAmmsConfigFeeAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateAmmsConfigFeeAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      ammsConfigsManager: getNextAccount(),
      ammsConfig: getNextAccount(),
      newFeeAuthority: getNextAccount(),
    },
    data: getUpdateAmmsConfigFeeAuthorityInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
