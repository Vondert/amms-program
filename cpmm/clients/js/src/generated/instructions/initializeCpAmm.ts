/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { CPMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_CP_AMM_DISCRIMINATOR = new Uint8Array([
  87, 106, 187, 127, 21, 15, 52, 8,
]);

export function getInitializeCpAmmDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_CP_AMM_DISCRIMINATOR
  );
}

export type InitializeCpAmmInstruction<
  TProgram extends string = typeof CPMM_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountFeeAuthority extends string | IAccountMeta<string> = string,
  TAccountBaseMint extends string | IAccountMeta<string> = string,
  TAccountQuoteMint extends string | IAccountMeta<string> = string,
  TAccountLpMint extends string | IAccountMeta<string> = string,
  TAccountAmmsConfig extends string | IAccountMeta<string> = string,
  TAccountCpAmm extends string | IAccountMeta<string> = string,
  TAccountSignerLpTokenAccount extends string | IAccountMeta<string> = string,
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountFeeAuthority extends string
        ? WritableAccount<TAccountFeeAuthority>
        : TAccountFeeAuthority,
      TAccountBaseMint extends string
        ? ReadonlyAccount<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountLpMint extends string
        ? WritableSignerAccount<TAccountLpMint> &
            IAccountSignerMeta<TAccountLpMint>
        : TAccountLpMint,
      TAccountAmmsConfig extends string
        ? ReadonlyAccount<TAccountAmmsConfig>
        : TAccountAmmsConfig,
      TAccountCpAmm extends string
        ? WritableAccount<TAccountCpAmm>
        : TAccountCpAmm,
      TAccountSignerLpTokenAccount extends string
        ? WritableAccount<TAccountSignerLpTokenAccount>
        : TAccountSignerLpTokenAccount,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeCpAmmInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitializeCpAmmInstructionDataArgs = {};

export function getInitializeCpAmmInstructionDataEncoder(): Encoder<InitializeCpAmmInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: INITIALIZE_CP_AMM_DISCRIMINATOR })
  );
}

export function getInitializeCpAmmInstructionDataDecoder(): Decoder<InitializeCpAmmInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeCpAmmInstructionDataCodec(): Codec<
  InitializeCpAmmInstructionDataArgs,
  InitializeCpAmmInstructionData
> {
  return combineCodec(
    getInitializeCpAmmInstructionDataEncoder(),
    getInitializeCpAmmInstructionDataDecoder()
  );
}

export type InitializeCpAmmAsyncInput<
  TAccountSigner extends string = string,
  TAccountFeeAuthority extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountLpMint extends string = string,
  TAccountAmmsConfig extends string = string,
  TAccountCpAmm extends string = string,
  TAccountSignerLpTokenAccount extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  feeAuthority: Address<TAccountFeeAuthority>;
  baseMint: Address<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  /** Check freeze authority on client */
  lpMint: TransactionSigner<TAccountLpMint>;
  ammsConfig: Address<TAccountAmmsConfig>;
  cpAmm?: Address<TAccountCpAmm>;
  signerLpTokenAccount?: Address<TAccountSignerLpTokenAccount>;
  rent?: Address<TAccountRent>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
};

export async function getInitializeCpAmmInstructionAsync<
  TAccountSigner extends string,
  TAccountFeeAuthority extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountLpMint extends string,
  TAccountAmmsConfig extends string,
  TAccountCpAmm extends string,
  TAccountSignerLpTokenAccount extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof CPMM_PROGRAM_ADDRESS,
>(
  input: InitializeCpAmmAsyncInput<
    TAccountSigner,
    TAccountFeeAuthority,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountSignerLpTokenAccount,
    TAccountRent,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeCpAmmInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountFeeAuthority,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountSignerLpTokenAccount,
    TAccountRent,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    feeAuthority: { value: input.feeAuthority ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    ammsConfig: { value: input.ammsConfig ?? null, isWritable: false },
    cpAmm: { value: input.cpAmm ?? null, isWritable: true },
    signerLpTokenAccount: {
      value: input.signerLpTokenAccount ?? null,
      isWritable: true,
    },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.cpAmm.value) {
    accounts.cpAmm.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 112, 95, 97, 109, 109])),
        getAddressEncoder().encode(expectAddress(accounts.lpMint.value)),
      ],
    });
  }
  if (!accounts.signerLpTokenAccount.value) {
    accounts.signerLpTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.lpMint.value)),
      ],
    });
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.feeAuthority),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.ammsConfig),
      getAccountMeta(accounts.cpAmm),
      getAccountMeta(accounts.signerLpTokenAccount),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getInitializeCpAmmInstructionDataEncoder().encode({}),
  } as InitializeCpAmmInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountFeeAuthority,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountSignerLpTokenAccount,
    TAccountRent,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type InitializeCpAmmInput<
  TAccountSigner extends string = string,
  TAccountFeeAuthority extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountLpMint extends string = string,
  TAccountAmmsConfig extends string = string,
  TAccountCpAmm extends string = string,
  TAccountSignerLpTokenAccount extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  feeAuthority: Address<TAccountFeeAuthority>;
  baseMint: Address<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  /** Check freeze authority on client */
  lpMint: TransactionSigner<TAccountLpMint>;
  ammsConfig: Address<TAccountAmmsConfig>;
  cpAmm: Address<TAccountCpAmm>;
  signerLpTokenAccount: Address<TAccountSignerLpTokenAccount>;
  rent?: Address<TAccountRent>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
};

export function getInitializeCpAmmInstruction<
  TAccountSigner extends string,
  TAccountFeeAuthority extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountLpMint extends string,
  TAccountAmmsConfig extends string,
  TAccountCpAmm extends string,
  TAccountSignerLpTokenAccount extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof CPMM_PROGRAM_ADDRESS,
>(
  input: InitializeCpAmmInput<
    TAccountSigner,
    TAccountFeeAuthority,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountSignerLpTokenAccount,
    TAccountRent,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeCpAmmInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountFeeAuthority,
  TAccountBaseMint,
  TAccountQuoteMint,
  TAccountLpMint,
  TAccountAmmsConfig,
  TAccountCpAmm,
  TAccountSignerLpTokenAccount,
  TAccountRent,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    feeAuthority: { value: input.feeAuthority ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    ammsConfig: { value: input.ammsConfig ?? null, isWritable: false },
    cpAmm: { value: input.cpAmm ?? null, isWritable: true },
    signerLpTokenAccount: {
      value: input.signerLpTokenAccount ?? null,
      isWritable: true,
    },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.feeAuthority),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.ammsConfig),
      getAccountMeta(accounts.cpAmm),
      getAccountMeta(accounts.signerLpTokenAccount),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getInitializeCpAmmInstructionDataEncoder().encode({}),
  } as InitializeCpAmmInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountFeeAuthority,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountSignerLpTokenAccount,
    TAccountRent,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ParsedInitializeCpAmmInstruction<
  TProgram extends string = typeof CPMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    feeAuthority: TAccountMetas[1];
    baseMint: TAccountMetas[2];
    quoteMint: TAccountMetas[3];
    /** Check freeze authority on client */
    lpMint: TAccountMetas[4];
    ammsConfig: TAccountMetas[5];
    cpAmm: TAccountMetas[6];
    signerLpTokenAccount: TAccountMetas[7];
    rent: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    tokenProgram: TAccountMetas[10];
    associatedTokenProgram: TAccountMetas[11];
  };
  data: InitializeCpAmmInstructionData;
};

export function parseInitializeCpAmmInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeCpAmmInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      feeAuthority: getNextAccount(),
      baseMint: getNextAccount(),
      quoteMint: getNextAccount(),
      lpMint: getNextAccount(),
      ammsConfig: getNextAccount(),
      cpAmm: getNextAccount(),
      signerLpTokenAccount: getNextAccount(),
      rent: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getInitializeCpAmmInstructionDataDecoder().decode(instruction.data),
  };
}
