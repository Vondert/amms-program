/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { CPMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const SWAP_IN_CP_AMM_DISCRIMINATOR = new Uint8Array([
  61, 164, 214, 168, 232, 232, 147, 137,
]);

export function getSwapInCpAmmDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SWAP_IN_CP_AMM_DISCRIMINATOR
  );
}

export type SwapInCpAmmInstruction<
  TProgram extends string = typeof CPMM_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountBaseMint extends string | IAccountMeta<string> = string,
  TAccountQuoteMint extends string | IAccountMeta<string> = string,
  TAccountSignerBaseAccount extends string | IAccountMeta<string> = string,
  TAccountSignerQuoteAccount extends string | IAccountMeta<string> = string,
  TAccountAmmsConfig extends string | IAccountMeta<string> = string,
  TAccountCpAmm extends string | IAccountMeta<string> = string,
  TAccountCpAmmBaseVault extends string | IAccountMeta<string> = string,
  TAccountCpAmmQuoteVault extends string | IAccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountToken2022Program extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountBaseMint extends string
        ? ReadonlyAccount<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountSignerBaseAccount extends string
        ? WritableAccount<TAccountSignerBaseAccount>
        : TAccountSignerBaseAccount,
      TAccountSignerQuoteAccount extends string
        ? WritableAccount<TAccountSignerQuoteAccount>
        : TAccountSignerQuoteAccount,
      TAccountAmmsConfig extends string
        ? ReadonlyAccount<TAccountAmmsConfig>
        : TAccountAmmsConfig,
      TAccountCpAmm extends string
        ? WritableAccount<TAccountCpAmm>
        : TAccountCpAmm,
      TAccountCpAmmBaseVault extends string
        ? WritableAccount<TAccountCpAmmBaseVault>
        : TAccountCpAmmBaseVault,
      TAccountCpAmmQuoteVault extends string
        ? WritableAccount<TAccountCpAmmQuoteVault>
        : TAccountCpAmmQuoteVault,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SwapInCpAmmInstructionData = {
  discriminator: ReadonlyUint8Array;
  swapAmount: bigint;
  estimatedResult: bigint;
  allowedSlippage: bigint;
  isInOut: boolean;
};

export type SwapInCpAmmInstructionDataArgs = {
  swapAmount: number | bigint;
  estimatedResult: number | bigint;
  allowedSlippage: number | bigint;
  isInOut: boolean;
};

export function getSwapInCpAmmInstructionDataEncoder(): Encoder<SwapInCpAmmInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['swapAmount', getU64Encoder()],
      ['estimatedResult', getU64Encoder()],
      ['allowedSlippage', getU64Encoder()],
      ['isInOut', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SWAP_IN_CP_AMM_DISCRIMINATOR })
  );
}

export function getSwapInCpAmmInstructionDataDecoder(): Decoder<SwapInCpAmmInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['swapAmount', getU64Decoder()],
    ['estimatedResult', getU64Decoder()],
    ['allowedSlippage', getU64Decoder()],
    ['isInOut', getBooleanDecoder()],
  ]);
}

export function getSwapInCpAmmInstructionDataCodec(): Codec<
  SwapInCpAmmInstructionDataArgs,
  SwapInCpAmmInstructionData
> {
  return combineCodec(
    getSwapInCpAmmInstructionDataEncoder(),
    getSwapInCpAmmInstructionDataDecoder()
  );
}

export type SwapInCpAmmAsyncInput<
  TAccountSigner extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountSignerBaseAccount extends string = string,
  TAccountSignerQuoteAccount extends string = string,
  TAccountAmmsConfig extends string = string,
  TAccountCpAmm extends string = string,
  TAccountCpAmmBaseVault extends string = string,
  TAccountCpAmmQuoteVault extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  baseMint: Address<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  signerBaseAccount?: Address<TAccountSignerBaseAccount>;
  signerQuoteAccount?: Address<TAccountSignerQuoteAccount>;
  ammsConfig: Address<TAccountAmmsConfig>;
  cpAmm: Address<TAccountCpAmm>;
  cpAmmBaseVault: Address<TAccountCpAmmBaseVault>;
  cpAmmQuoteVault: Address<TAccountCpAmmQuoteVault>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  token2022Program?: Address<TAccountToken2022Program>;
  systemProgram?: Address<TAccountSystemProgram>;
  swapAmount: SwapInCpAmmInstructionDataArgs['swapAmount'];
  estimatedResult: SwapInCpAmmInstructionDataArgs['estimatedResult'];
  allowedSlippage: SwapInCpAmmInstructionDataArgs['allowedSlippage'];
  isInOut: SwapInCpAmmInstructionDataArgs['isInOut'];
};

export async function getSwapInCpAmmInstructionAsync<
  TAccountSigner extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountSignerBaseAccount extends string,
  TAccountSignerQuoteAccount extends string,
  TAccountAmmsConfig extends string,
  TAccountCpAmm extends string,
  TAccountCpAmmBaseVault extends string,
  TAccountCpAmmQuoteVault extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountToken2022Program extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CPMM_PROGRAM_ADDRESS,
>(
  input: SwapInCpAmmAsyncInput<
    TAccountSigner,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountSignerBaseAccount,
    TAccountSignerQuoteAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountToken2022Program,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SwapInCpAmmInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountSignerBaseAccount,
    TAccountSignerQuoteAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountToken2022Program,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    signerBaseAccount: {
      value: input.signerBaseAccount ?? null,
      isWritable: true,
    },
    signerQuoteAccount: {
      value: input.signerQuoteAccount ?? null,
      isWritable: true,
    },
    ammsConfig: { value: input.ammsConfig ?? null, isWritable: false },
    cpAmm: { value: input.cpAmm ?? null, isWritable: true },
    cpAmmBaseVault: { value: input.cpAmmBaseVault ?? null, isWritable: true },
    cpAmmQuoteVault: { value: input.cpAmmQuoteVault ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.signerBaseAccount.value) {
    accounts.signerBaseAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.baseMint.value)),
      ],
    });
  }
  if (!accounts.signerQuoteAccount.value) {
    accounts.signerQuoteAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.token2022Program.value) {
    accounts.token2022Program.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.signerBaseAccount),
      getAccountMeta(accounts.signerQuoteAccount),
      getAccountMeta(accounts.ammsConfig),
      getAccountMeta(accounts.cpAmm),
      getAccountMeta(accounts.cpAmmBaseVault),
      getAccountMeta(accounts.cpAmmQuoteVault),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSwapInCpAmmInstructionDataEncoder().encode(
      args as SwapInCpAmmInstructionDataArgs
    ),
  } as SwapInCpAmmInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountSignerBaseAccount,
    TAccountSignerQuoteAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountToken2022Program,
    TAccountSystemProgram
  >;

  return instruction;
}

export type SwapInCpAmmInput<
  TAccountSigner extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountSignerBaseAccount extends string = string,
  TAccountSignerQuoteAccount extends string = string,
  TAccountAmmsConfig extends string = string,
  TAccountCpAmm extends string = string,
  TAccountCpAmmBaseVault extends string = string,
  TAccountCpAmmQuoteVault extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  baseMint: Address<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  signerBaseAccount: Address<TAccountSignerBaseAccount>;
  signerQuoteAccount: Address<TAccountSignerQuoteAccount>;
  ammsConfig: Address<TAccountAmmsConfig>;
  cpAmm: Address<TAccountCpAmm>;
  cpAmmBaseVault: Address<TAccountCpAmmBaseVault>;
  cpAmmQuoteVault: Address<TAccountCpAmmQuoteVault>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  token2022Program?: Address<TAccountToken2022Program>;
  systemProgram?: Address<TAccountSystemProgram>;
  swapAmount: SwapInCpAmmInstructionDataArgs['swapAmount'];
  estimatedResult: SwapInCpAmmInstructionDataArgs['estimatedResult'];
  allowedSlippage: SwapInCpAmmInstructionDataArgs['allowedSlippage'];
  isInOut: SwapInCpAmmInstructionDataArgs['isInOut'];
};

export function getSwapInCpAmmInstruction<
  TAccountSigner extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountSignerBaseAccount extends string,
  TAccountSignerQuoteAccount extends string,
  TAccountAmmsConfig extends string,
  TAccountCpAmm extends string,
  TAccountCpAmmBaseVault extends string,
  TAccountCpAmmQuoteVault extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountToken2022Program extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CPMM_PROGRAM_ADDRESS,
>(
  input: SwapInCpAmmInput<
    TAccountSigner,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountSignerBaseAccount,
    TAccountSignerQuoteAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountToken2022Program,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SwapInCpAmmInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountBaseMint,
  TAccountQuoteMint,
  TAccountSignerBaseAccount,
  TAccountSignerQuoteAccount,
  TAccountAmmsConfig,
  TAccountCpAmm,
  TAccountCpAmmBaseVault,
  TAccountCpAmmQuoteVault,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountToken2022Program,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    signerBaseAccount: {
      value: input.signerBaseAccount ?? null,
      isWritable: true,
    },
    signerQuoteAccount: {
      value: input.signerQuoteAccount ?? null,
      isWritable: true,
    },
    ammsConfig: { value: input.ammsConfig ?? null, isWritable: false },
    cpAmm: { value: input.cpAmm ?? null, isWritable: true },
    cpAmmBaseVault: { value: input.cpAmmBaseVault ?? null, isWritable: true },
    cpAmmQuoteVault: { value: input.cpAmmQuoteVault ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.token2022Program.value) {
    accounts.token2022Program.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.signerBaseAccount),
      getAccountMeta(accounts.signerQuoteAccount),
      getAccountMeta(accounts.ammsConfig),
      getAccountMeta(accounts.cpAmm),
      getAccountMeta(accounts.cpAmmBaseVault),
      getAccountMeta(accounts.cpAmmQuoteVault),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSwapInCpAmmInstructionDataEncoder().encode(
      args as SwapInCpAmmInstructionDataArgs
    ),
  } as SwapInCpAmmInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountSignerBaseAccount,
    TAccountSignerQuoteAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountToken2022Program,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedSwapInCpAmmInstruction<
  TProgram extends string = typeof CPMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    baseMint: TAccountMetas[1];
    quoteMint: TAccountMetas[2];
    signerBaseAccount: TAccountMetas[3];
    signerQuoteAccount: TAccountMetas[4];
    ammsConfig: TAccountMetas[5];
    cpAmm: TAccountMetas[6];
    cpAmmBaseVault: TAccountMetas[7];
    cpAmmQuoteVault: TAccountMetas[8];
    associatedTokenProgram: TAccountMetas[9];
    tokenProgram: TAccountMetas[10];
    token2022Program: TAccountMetas[11];
    systemProgram: TAccountMetas[12];
  };
  data: SwapInCpAmmInstructionData;
};

export function parseSwapInCpAmmInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSwapInCpAmmInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      baseMint: getNextAccount(),
      quoteMint: getNextAccount(),
      signerBaseAccount: getNextAccount(),
      signerQuoteAccount: getNextAccount(),
      ammsConfig: getNextAccount(),
      cpAmm: getNextAccount(),
      cpAmmBaseVault: getNextAccount(),
      cpAmmQuoteVault: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      token2022Program: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSwapInCpAmmInstructionDataDecoder().decode(instruction.data),
  };
}
