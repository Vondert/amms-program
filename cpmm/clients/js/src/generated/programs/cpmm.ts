/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedCollectFeesFromCpAmmInstruction,
  type ParsedInitializeAmmsConfigInstruction,
  type ParsedInitializeAmmsConfigsManagerInstruction,
  type ParsedInitializeCpAmmInstruction,
  type ParsedLaunchCpAmmInstruction,
  type ParsedProvideToCpAmmInstruction,
  type ParsedSwapInCpAmmInstruction,
  type ParsedUpdateAmmsConfigFeeAuthorityInstruction,
  type ParsedUpdateAmmsConfigsManagerAuthorityInstruction,
  type ParsedUpdateAmmsConfigsManagerHeadAuthorityInstruction,
  type ParsedWithdrawFromCpAmmInstruction,
} from '../instructions';

export const CPMM_PROGRAM_ADDRESS =
  '2wFPV42nma7Lv8fqfUEtzBYGoiZybowLxFokaGGMqGCg' as Address<'2wFPV42nma7Lv8fqfUEtzBYGoiZybowLxFokaGGMqGCg'>;

export enum CpmmAccount {
  AmmsConfig,
  AmmsConfigsManager,
  CpAmm,
}

export function identifyCpmmAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CpmmAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([14, 184, 126, 68, 173, 213, 150, 0])
      ),
      0
    )
  ) {
    return CpmmAccount.AmmsConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([139, 250, 201, 66, 232, 224, 136, 144])
      ),
      0
    )
  ) {
    return CpmmAccount.AmmsConfigsManager;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([105, 219, 233, 13, 147, 109, 73, 100])
      ),
      0
    )
  ) {
    return CpmmAccount.CpAmm;
  }
  throw new Error(
    'The provided account could not be identified as a cpmm account.'
  );
}

export enum CpmmInstruction {
  CollectFeesFromCpAmm,
  InitializeAmmsConfig,
  InitializeAmmsConfigsManager,
  InitializeCpAmm,
  LaunchCpAmm,
  ProvideToCpAmm,
  SwapInCpAmm,
  UpdateAmmsConfigFeeAuthority,
  UpdateAmmsConfigsManagerAuthority,
  UpdateAmmsConfigsManagerHeadAuthority,
  WithdrawFromCpAmm,
}

export function identifyCpmmInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CpmmInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([54, 226, 123, 162, 0, 184, 158, 206])
      ),
      0
    )
  ) {
    return CpmmInstruction.CollectFeesFromCpAmm;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([249, 101, 117, 47, 67, 156, 98, 162])
      ),
      0
    )
  ) {
    return CpmmInstruction.InitializeAmmsConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([128, 200, 181, 18, 56, 7, 176, 7])
      ),
      0
    )
  ) {
    return CpmmInstruction.InitializeAmmsConfigsManager;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([87, 106, 187, 127, 21, 15, 52, 8])
      ),
      0
    )
  ) {
    return CpmmInstruction.InitializeCpAmm;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([205, 161, 177, 76, 92, 218, 37, 101])
      ),
      0
    )
  ) {
    return CpmmInstruction.LaunchCpAmm;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([228, 147, 253, 251, 242, 255, 110, 245])
      ),
      0
    )
  ) {
    return CpmmInstruction.ProvideToCpAmm;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([61, 164, 214, 168, 232, 232, 147, 137])
      ),
      0
    )
  ) {
    return CpmmInstruction.SwapInCpAmm;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([135, 191, 58, 216, 110, 155, 53, 191])
      ),
      0
    )
  ) {
    return CpmmInstruction.UpdateAmmsConfigFeeAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([13, 51, 80, 254, 92, 36, 221, 245])
      ),
      0
    )
  ) {
    return CpmmInstruction.UpdateAmmsConfigsManagerAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([83, 198, 150, 158, 19, 72, 91, 205])
      ),
      0
    )
  ) {
    return CpmmInstruction.UpdateAmmsConfigsManagerHeadAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([199, 54, 177, 131, 202, 241, 176, 155])
      ),
      0
    )
  ) {
    return CpmmInstruction.WithdrawFromCpAmm;
  }
  throw new Error(
    'The provided instruction could not be identified as a cpmm instruction.'
  );
}

export type ParsedCpmmInstruction<
  TProgram extends string = '2wFPV42nma7Lv8fqfUEtzBYGoiZybowLxFokaGGMqGCg',
> =
  | ({
      instructionType: CpmmInstruction.CollectFeesFromCpAmm;
    } & ParsedCollectFeesFromCpAmmInstruction<TProgram>)
  | ({
      instructionType: CpmmInstruction.InitializeAmmsConfig;
    } & ParsedInitializeAmmsConfigInstruction<TProgram>)
  | ({
      instructionType: CpmmInstruction.InitializeAmmsConfigsManager;
    } & ParsedInitializeAmmsConfigsManagerInstruction<TProgram>)
  | ({
      instructionType: CpmmInstruction.InitializeCpAmm;
    } & ParsedInitializeCpAmmInstruction<TProgram>)
  | ({
      instructionType: CpmmInstruction.LaunchCpAmm;
    } & ParsedLaunchCpAmmInstruction<TProgram>)
  | ({
      instructionType: CpmmInstruction.ProvideToCpAmm;
    } & ParsedProvideToCpAmmInstruction<TProgram>)
  | ({
      instructionType: CpmmInstruction.SwapInCpAmm;
    } & ParsedSwapInCpAmmInstruction<TProgram>)
  | ({
      instructionType: CpmmInstruction.UpdateAmmsConfigFeeAuthority;
    } & ParsedUpdateAmmsConfigFeeAuthorityInstruction<TProgram>)
  | ({
      instructionType: CpmmInstruction.UpdateAmmsConfigsManagerAuthority;
    } & ParsedUpdateAmmsConfigsManagerAuthorityInstruction<TProgram>)
  | ({
      instructionType: CpmmInstruction.UpdateAmmsConfigsManagerHeadAuthority;
    } & ParsedUpdateAmmsConfigsManagerHeadAuthorityInstruction<TProgram>)
  | ({
      instructionType: CpmmInstruction.WithdrawFromCpAmm;
    } & ParsedWithdrawFromCpAmmInstruction<TProgram>);
